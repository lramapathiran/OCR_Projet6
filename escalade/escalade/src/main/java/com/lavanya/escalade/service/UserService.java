package com.lavanya.escalade.service;

import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.lavanya.escalade.error.UserAlreadyExistException;
import com.lavanya.escalade.model.User;
import com.lavanya.escalade.repository.UserRepository;

/**
 * Service provider for all business functionalities related to User class.
 * @author lavanya
 */
@Service
public class UserService implements UserDetailsService{
	
	// This means to get the bean called userRepository
	//  Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	/**
	 * method to retrieve all users saved in database and displayed with pagination.
	 * @param pageNumber, int to access to the number of User Page to display.  
	 * @return Page of User.
	 */
	public Page<User> getAllUsers(int pageNumber) {
		Sort sort = Sort.by("lastName").ascending();
		Pageable pageable = PageRequest.of(pageNumber -1, 10, sort);
		
		return userRepository.findAll(pageable);
	}
	
	/**
	 * method to save an object User with its password encoded in database.
	 * @param user, object User to save in database.
	 * @throws UserAlreadyExistException, throws this exception if the user to be saved
	 * presents an email adress already used by another user.
	 */
	@Transactional
	public void save(final User user) throws UserAlreadyExistException{
		
		if (emailExists(user.getEmail())) {   
            throw new UserAlreadyExistException(
              "Il existe déjà un email avec l'addresse: "  
              + user.getEmail());
        }
		
		user.setEncodedPassword(passwordEncoder.encode(user.getPassword()));
		
		userRepository.save(user);
	}
	
	/**
	 * method to verify if a user to be saved has entered an email already existing in database.
	 * @param email, email to verify its existence or not in database.
	 * @return boolean, return true or false for when an email already exists in database.	 
	 */
	private boolean emailExists(String email) {
        return userRepository.findByEmail(email).isPresent();
    }
	
	/**
	 * method to retrieve a particular user identified by its id.
	 * @param id, id of the user of interest to identify in database.
	 * @return User object.
	 */
	public User getUserById(int id) {
		
		Optional<User>  userResponse = userRepository.findById(id);
		User user = userResponse.get();
		return user;
	}
	
	/**
	 * method to retrieve the user principal to connect to the website using his username to authenticate.
	 * @param email, used as username of the user to connect.
	 * @return UserDetails.
	 */
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {

		Optional<User> user = userRepository.findByEmail(email);

		user.orElseThrow(() -> new UsernameNotFoundException(email + " n'a pas été trouvé"));

		return user.map(MyUserDetails::new).get();
	}
	
	/**
	 * method to get a counting of total users created in database.
	 * @return Integer, the total amount of users saved.
	 */
	public Integer getTotalUsersRegistered() {		
		return userRepository.countUsersRegistered();
	}

}
